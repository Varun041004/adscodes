linkedlist
import java.util.Scanner;

public class linked_list {

    public static class node {
        int data ;
        node next;
        public node (int x)
        {
            data = x;
            next = null;
        }
    }
    public static class linked_list_op{
        node head = null;
        node tail = null;
        int count = 0;

        void insertAtBeg(int data)
        {
            node newnode = new node(data);
            if(head==null) {
                head  = newnode;
                tail  =  newnode;
            }
            else {
                newnode.next = head;
                head = newnode;
            }
            count++;
        }
        void insertAtEnd(int data)
        {
            node newnode = new node(data);
            if(head==null)
                head = newnode;
            else
                tail.next = newnode;
            tail =newnode;
            count++;
        }

        void insertAtPos(int data, int pos)
        {
            if(pos<1 || pos > count+1)
                System.out.println("entered position is not valid");
            if(pos == 1)
                insertAtBeg(data);
            else if(pos == count+1)
                insertAtEnd(data);
            else {
                node temp = head;
                for(int i=1;i<pos-1;i++)
                {
                    temp = temp.next;
                }
                node newnode = new node(data);
                newnode.next = temp.next;
                temp.next = newnode;
                count++;
            }
        }

        int delFromBeg()
        {
            int element ;
            if(head==null) {
                System.out.println("list is empty");
                return -1;
            }
            else{
                element =head.data;
                head = head.next;
                count--;
                return element;
            }
        }

        int delFromEnd()
        {
            int element ;
            if(head==null) {
                System.out.println("list is empty");
                return -1;
            }
            else if(head.next==null){
                element = head.data;
                head = null;
                tail = null;
                count--;
                return element;
            }
            else{
                node temp = head;
                element = tail.data;
                while(temp.next != tail)
                {
                    temp = temp.next;
                }
                temp.next = null;
                tail = temp;
                count--;
                return element;
            }
        }
        int delFromPos(int pos)
        {
            int element;
            node temp = head;
            int idx=1;
            while(idx<pos-1)
            {
                temp = temp.next;
                idx++;
            }
            element = temp.next.data;
            temp.next = temp.next.next;
            count--;
            return element;
        }

        void display() {
            node temp = head;
            while (temp != null) {
                System.out.print(temp.data + "->");
                temp = temp.next;
            }
            System.out.println("null");
        }

        int size(){
            return count;
        }

        boolean isEmpty() {
            return head==null;
        }
    }
    public static void main(String[] args) {

        linked_list_op ll = new linked_list_op();
        Scanner sc = new Scanner(System.in);

        System.out.println("1. Insert at beginning");
        System.out.println("2. Insert at end");
        System.out.println("3. Insert at position");
        System.out.println("4. Delete from beginning");
        System.out.println("5. Delete from end");
        System.out.println("6. Delete from position");
        System.out.println("7. Display");
        System.out.println("8. Size");
        System.out.println("9. Is Empty");
        System.out.println("10. Exit");

        while (true) {

            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter data: ");
                    int data = sc.nextInt();
                    ll.insertAtBeg(data);
                    break;

                case 2:
                    System.out.print("Enter data: ");
                    data = sc.nextInt();
                    ll.insertAtEnd(data);
                    break;

                case 3:
                    System.out.print("Enter data: ");
                    data = sc.nextInt();
                    System.out.print("Enter position: ");
                    int pos = sc.nextInt();
                    ll.insertAtPos(data, pos);
                    break;

                case 4:
                    int deletedFromBeg = ll.delFromBeg();
                    System.out.println("Deleted element from beginning: " + deletedFromBeg);
                    break;

                case 5:
                    int deletedFromEnd = ll.delFromEnd();
                    System.out.println("Deleted element from end: " + deletedFromEnd);
                    break;

                case 6:
                    System.out.print("Enter position: ");
                    pos = sc.nextInt();
                    int deletedFromPos = ll.delFromPos(pos);
                    System.out.println("Deleted element from position " + pos + ": " + deletedFromPos);
                    break;

                case 7:
                    ll.display();
                    break;

                case 8:
                    System.out.println("Size of the list: " + ll.size());
                    break;

                case 9:
                    System.out.println("Is list empty: " + ll.isEmpty());
                    break;

                case 10:
                    System.out.println("Exiting program.");
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Please enter a number between 1 and 10.");
            }
        }

    }
}
